var documenterSearchIndex = {"docs":
[{"location":"functions/#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"functions/#Index","page":"Functions","title":"Index","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/#Documentation","page":"Functions","title":"Documentation","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [PlantBiophysics]","category":"page"},{"location":"functions/#PlantBiophysics.AbstractAModel","page":"Functions","title":"PlantBiophysics.AbstractAModel","text":"Assimilation (photosynthesis) abstract model. All photosynthesis models must be a subtype of this.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractComponentModel","page":"Functions","title":"PlantBiophysics.AbstractComponentModel","text":"Abstract structure to hold all models for object components (e.g. leaves, metamers...).\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractEnergyModel","page":"Functions","title":"PlantBiophysics.AbstractEnergyModel","text":"Energy balance abstract struct. All energy balance models must be a subtype of this.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractGsModel","page":"Functions","title":"PlantBiophysics.AbstractGsModel","text":"Stomatal conductance abstract model. All stomatal conductance models must be a subtype of this.\n\nAn AbstractGsModel subtype struct must implement at least a g0 field.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractInterceptionModel","page":"Functions","title":"PlantBiophysics.AbstractInterceptionModel","text":"Light interception abstract struct. All light interception models must be a subtype of this.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.AbstractModel","page":"Functions","title":"PlantBiophysics.AbstractModel","text":"Abstract model type. All models are subtypes of this one, see e.g. AbstractAModel\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Atmosphere","page":"Functions","title":"PlantBiophysics.Atmosphere","text":"Atmosphere structure to hold all values related to the meteorology / atmoshpere.\n\nArguments\n\nT (°C): air temperature\nWind (m s-1): wind speed\nP (kPa): air pressure\nRh = rh_from_vpd(VPD,eₛ) (0-1): relative humidity\nCₐ (ppm): air CO₂ concentration\ne = vapor_pressure(T,Rh) (kPa): vapor pressure\neₛ = e_sat(T) (kPa): saturated vapor pressure\nVPD = eₛ - e (kPa): vapor pressure deficit\nρ = air_density(T, P, constants.Rd, constants.K₀) (kg m-3): air density\nλ = latent_heat_vaporization(T, constants.λ₀) (J kg-1): latent heat of vaporization\nγ = psychrometer_constant(P, λ, constants.Cₚ, constants.ε) (kPa K−1): psychrometer \"constant\"\nε = atmosphere_emissivity(T,e,constants.K₀) (0-1): atmosphere emissivity\nΔ = e_sat_slope(meteo.T) (0-1): slope of the saturation vapor pressure at air temperature\n\nNotes\n\nThe structure can be built using only T, Rh, Wind and P. All other variables are oprional and can be automatically computed using the functions given in Arguments.\n\nExamples\n\nAtmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Component","page":"Functions","title":"PlantBiophysics.Component","text":"Component(interception, energy, status)\nComponent(;interception = missing, energy = missing, status...)\n\nGeneric component, which is a subtype of AbstractComponentModel implementing a component with an interception model and an energy balance model. It can be anything such as a trunk, a solar panel or else.\n\nArguments\n\ninterception <: Union{Missing,AbstractInterceptionModel}: An interception model.\nenergy <: Union{Missing,AbstractEnergyModel}: An energy model.\nstatus <: MutableNamedTuple: a mutable named tuple to track the status (i.e. the variables) of\n\nthe component. Values are set to 0.0 if not provided as VarArgs (see examples)\n\nExamples\n\n# An internode in a plant:\nComponent(energy = Monteith())\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ConstantA","page":"Functions","title":"PlantBiophysics.ConstantA","text":"Constant (forced) assimilation, given in μmol m^-2 s^-1.\n\nExamples\n\nConstantA(30.0)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.ConstantGs","page":"Functions","title":"PlantBiophysics.ConstantGs","text":"Constant stomatal conductance for CO₂ struct.\n\nThen used as follows: Gs = ConstantGs(0.03,0.1) Gₛ = Gs.g0 + Gs.gs * A\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Constants","page":"Functions","title":"PlantBiophysics.Constants","text":"Physical constants\n\nThe definition and default values are:\n\nK₀ = -273.15: absolute zero (°C)\nR = 8.314: universal gas constant (J mol^-1 K^-1).\nRd = 287.0586: gas constant of dry air (J kg^-1 K^-1).\nDₕ₀ = 21.5e-6: molecular diffusivity for heat at base temperature, applied in the integrated form of the\n\nFick’s Law of diffusion (m^2 s^-1). See eq. 3.10 from Monteith and Unsworth (2013).\n\nCₚ = 1013.0: Specific heat of air at constant pressure (J K^-1 kg^-1), also\n\nknown as efficiency of impaction of particles. See Allen et al. (1998), or Monteith and Unsworth (2013). NB: bigleaf R package uses 1004.834 intead.\n\nε = 0.622: ratio of molecular weights of water vapor and air. See Monteith and\n\nUnsworth (2013).\n\nλ₀ = 2.501: latent heat of vaporization for water at 0 degree (J kg^-1).\nσ = 5.670373e-08 Stefan-Boltzmann constant\n\nin (W m^-2 K^-4).\n\nGbₕ_to_Gbₕ₂ₒ = 1.075: conversion coefficient from conductance to heat to conductance to water\n\nvapor.\n\nGsc_to_Gsw = 1.57: conversion coefficient from stomatal conductance to CO₂ to conductance to water\n\nvapor.\n\nGbc_to_Gbₕ = 1.32: conversion coefficient from boundary layer conductance to CO₂ to heat.\nMₕ₂ₒ = 18.0e-3 (kg mol-1): Molar mass for water.\n\nReferences\n\nAllen, Richard G., Luis S. Pereira, Dirk Raes, et Martin %J Fao Smith. 1998. « Crop evapotranspiration-Guidelines for computing crop water requirements-FAO Irrigation and drainage paper 56 » 300 (9): D05109.\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Fvcb","page":"Functions","title":"PlantBiophysics.Fvcb","text":"Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981).\n\nThe definition:\n\nTᵣ: the reference temperature (°C) at which other parameters were measured\nVcMaxRef: maximum rate of Rubisco activity (μmol m^-2 s^-1)\nJMaxRef: potential rate of electron transport (μmol m^-2 s^-1)\nRdRef: mitochondrial respiration in the light at reference temperature (μmol m^-2 s^-1)\nEₐᵣ: activation energy (J mol^-1), or the exponential rate of rise for Rd.\nO₂: intercellular dioxygen concentration (ppm)\nEₐⱼ: activation energy (J mol^-1), or the exponential rate of rise for JMax.\nHdⱼ: rate of decrease of the function above the optimum (also called EDVJ) for JMax.\nΔₛⱼ: entropy factor for JMax.\nEₐᵥ: activation energy (J mol^-1), or the exponential rate of rise for VcMax.\nHdᵥ: rate of decrease of the function above the optimum (also called EDVC) for VcMax.\nΔₛᵥ: entropy factor for VcMax.\nα: quantum yield of electron transport (mol_e mol^-1_quanta). See also eq. 4 of\n\nMedlyn et al. (2002) and its implementation in get_J\n\nθ: determines the curvature of the light response curve for J~PPFD. See also eq. 4 of\n\nMedlyn et al. (2002) and its implementation in get_J\n\nThe default values of the temperature correction parameters are taken from plantecophys. If there is no negative effect of high temperatures on the reaction (Jmax or VcMax), then Δₛ can be set to 0.0.\n\nNote\n\nMedlyn et al. (2002) found relatively low influence (\"a slight effect\") of α and θ. They also say that Kc, Ko and Γ* \"are thought to be intrinsic properties of the Rubisco enzyme and are generally assumed constant among species\".\n\nSee also\n\nget_J\nphotosynthesis\n\nReferences\n\nCaemmerer, S. von, et G. D. Farquhar. 1981. « Some Relationships between the Biochemistry of Photosynthesis and the Gas Exchange of Leaves ». Planta 153 (4): 376‑87. https://doi.org/10.1007/BF00384257.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nExamples\n\nGet the fieldnames:\nfieldnames(Fvcb)\n# Using default values for the model:\nA = Fvcb()\n\nA.Eₐᵥ\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.FvcbIter","page":"Functions","title":"PlantBiophysics.FvcbIter","text":"Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981).\n\nIterative implementation, i.e. the assimilation is computed iteratively over Cᵢ.\n\nFor more details on arguments, see Fvcb. This structure has several more parameters:\n\niter_A_max::Int: maximum number of iterations allowed for the iteration on the assimilation.\nΔT_A::T = 1: threshold bellow which the assimilation is considered constant. Given in\n\npercent of change, i.e. 1% means that two successive assimilations with less than 1% difference in value are considered the same value.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Ignore","page":"Functions","title":"PlantBiophysics.Ignore","text":"Ignore model for light interception, see here. Make the mesh invisible, and not computed. Can save a lot of time for the computations when there are components types that are not visible anyway (e.g. inside others).\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.LeafModels","page":"Functions","title":"PlantBiophysics.LeafModels","text":"LeafModels(interception, energy, photosynthesis, stomatal_conductance, status)\nLeafModels(;interception = missing, energy = missing, photosynthesis = missing,\n    stomatal_conductance = missing,status...)\n\nLeafModels component, which is a subtype of AbstractComponentModel implementing a component with a photosynthetic activity. It could be a leaf, or a leaflet, or whatever kind of component that is photosynthetic. The name LeafModels was chosen not because it is generic, but because it is short, simple and self-explanatory.\n\nArguments\n\ninterception <: Union{Missing,AbstractInterceptionModel}: An interception model.\nenergy <: Union{Missing,AbstractEnergyModel}: An energy model, e.g. Monteith.\nphotosynthesis <: Union{Missing,AbstractAModel}: A photosynthesis model, e.g. Fvcb\nstomatal_conductance <: Union{Missing,AbstractGsModel}: A stomatal conductance model, e.g. Medlyn or\n\nConstantGs\n\nstatus <: MutableNamedTuple: a mutable named tuple to track the status (i.e. the variables) of\n\nthe leaf. Values are set to 0.0 if not provided as VarArgs (see examples)\n\nDetails\n\nThe status field depends on the input models. You can get the variables needed by a model using variables on the instantiation of a model. Generally the variables are:\n\nLight interception model  (see AbstractInterceptionModel)\n\nRn (W m-2): net global radiation (PAR + NIR + TIR). Often computed from a light interception model\nPPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density\nskyFraction (0-2): view factor between the object and the sky for both faces.\n\nEnergy balance model (see energy_balance)\n\nTₗ (°C): temperature of the object. Often computed from an energy balance model.\nRₗₗ (W m-2): net longwave radiation for the object (TIR)\nCₛ (ppm): stomatal CO₂ concentration\nψₗ (kPa): leaf water potential\nH (W m-2): sensible heat flux\nλE (W m-2): latent heat flux\nDₗ (kPa): vapour pressure difference between the surface and the saturation vapour\n\nPhotosynthesis model (see photosynthesis)\n\nA (μmol m-2 s-1): carbon assimilation\nGbₕ (m s-1): boundary conductance for heat (free + forced convection)\nCᵢ (ppm): intercellular CO₂ concentration\n\nExamples\n\n# A leaf with a width of 0.03 m, that uses the Monteith and Unsworth (2013) model for energy\n# balance, The Farquhar et al. (1980) model for photosynthesis, and a constant stomatal\n# conductance for CO₂ of 0.0011 with no residual conductance. The status of\n# the leaf is not set yet, all are initialised at `0.0`:\nLeafModels(energy = Monteith(),\n     photosynthesis = Fvcb(),\n     stomatal_conductance = ConstantGs(0.0, 0.0011))\n\n# If we need to initialise some variables at different values, we can call the leaf as:\n\nLeafModels(photosynthesis = Fvcb(),Cᵢ = 380.0)\n\n# Or again:\nLeafModels(photosynthesis = Fvcb(), energy = Monteith(), Cᵢ = 380.0, Tₗ = 20.0)\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Medlyn","page":"Functions","title":"PlantBiophysics.Medlyn","text":"struct to hold the parameters for Medlyn et al. (2011) stomatal conductance model for CO₂ .\n\nThen used for example as follows: Gs = Medlyn(0.03,0.1) gsmod = gs(Gs,(Cₛ = 400.0, VPD = 1.5)) Gₛ = Gs.g0 + gsmod * A\n\nReferences\n\nMedlyn, Belinda E., Remko A. Duursma, Derek Eamus, David S. Ellsworth, I. Colin Prentice, Craig V. M. Barton, Kristine Y. Crous, Paolo De Angelis, Michael Freeman, et Lisa Wingate.\n\n« Reconciling the optimal and empirical approaches to modelling stomatal conductance ».\n\nGlobal Change Biology 17 (6): 2134‑44. https://doi.org/10.1111/j.1365-2486.2010.02375.x.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Monteith","page":"Functions","title":"PlantBiophysics.Monteith","text":"Struct to hold parameter and values for the energy model close to the one in Monteith and Unsworth (2013)\n\nArguments\n\naₛₕ = 2: number of faces of the object that exchange sensible heat fluxes\naₛᵥ = 1: number of faces of the object that exchange latent heat fluxes (hypostomatous => 1)\nε = 0.955: emissivity of the object\nmaxiter = 10: maximal number of iterations allowed to close the energy balance\nΔT = 0.01 (°C): maximum difference in object temperature between two iterations to\n\nconsider convergence\n\nExamples\n\nenergy_model = Monteith() # a leaf in an illuminated chamber\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.OpticalProperties","page":"Functions","title":"PlantBiophysics.OpticalProperties","text":"Optical properties abstract struct\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Translucent","page":"Functions","title":"PlantBiophysics.Translucent","text":"Translucent model for light interception, see here.\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.σ","page":"Functions","title":"PlantBiophysics.σ","text":"σ()\n\nσ, the scattering factor of a component. See here for more details\n\n\n\n\n\n","category":"type"},{"location":"functions/#PlantBiophysics.Fvcb_net_assimiliation-NTuple{6,Any}","page":"Functions","title":"PlantBiophysics.Fvcb_net_assimiliation","text":"Fvcb_net_assimiliation(Cᵢ,Vⱼ,Γˢ,VcMax,Km,Rd)\n\nNet assimilation following the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.air_density-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.air_density","text":"air_density(Tₐ, P)\nair_density(Tₐ, P, Rd, K₀)\n\nρ, the air density (kg m-3).\n\nArguments\n\nTₐ (Celsius degree): air temperature\nP (kPa): air pressure\nRd (J kg-1 K-1): gas constant of dry air (see Foken p. 245, or R bigleaf package).\nK₀ (Celsius degree): temperature in Celsius degree at 0 Kelvin\n\nNote\n\nRd and K₀ are Taken from Constants if not provided.\n\nReferences\n\nFoken, T, 2008: Micrometeorology. Springer, Berlin, Germany.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.arrhenius","page":"Functions","title":"PlantBiophysics.arrhenius","text":"arrhenius(A,Eₐ,Tₖ,Tᵣₖ,R = Constants().R)\n\nThe Arrhenius function for dependence of the rate constant of a chemical reaction.\n\nArguments\n\nA: pre-exponential factor, a constant for each chemical reaction\nEₐ: activation energy for the reaction (J mol^-1)\nTₖ: temperature (Kelvin)\nTᵣₖ: reference temperature (Kelvin) at which A was measured\nR: universal gas constant (J mol^-1 K^-1)\n\nExamples\n\n# Importing physical constants\nconstants = Constants()\n# Using default values for the model:\nA = Fvcb()\n\n# Computing Jmax:\narrhenius(A.JMaxRef,A.Eₐⱼ,28.0-constants.K₀,A.Tᵣ-constants.K₀,constants.R)\n# ! Warning: temperatures must be given in Kelvin\n\n# Computing Vcmax:\narrhenius(A.VcMaxRef,A.Eₐᵥ,28.0-constants.K₀,A.Tᵣ-constants.K₀,constants.R)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.arrhenius-2","page":"Functions","title":"PlantBiophysics.arrhenius","text":"arrhenius(A,Eₐ,Tₖ,Tᵣₖ,Hd,Δₛ,R = Constants().R)\n\nThe Arrhenius function for dependence of the rate constant of a chemical reaction, modified following equation (17) from Medlyn et al. (2002) to consider the negative effect of very high temperatures.\n\nArguments\n\nA: the pre-exponential factor, a constant for each chemical reaction\nEₐ: activation energy (J mol^-1), or the exponential rate of rise\n\nof the function (Ha in the equation of Medlyn et al. (2002))\n\nTₖ: current temperature (Kelvin)\nTᵣₖ: reference temperature (Kelvin) at which A was measured\nHd: rate of decrease of the function above the optimum (called EDVJ in\n\nMAESPA and plantecophys)\n\nΔₛ: entropy factor\nR: is the universal gas constant (J mol^-1 K^-1)\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nExamples\n\n# Importing physical constants\nconstants = Constants()\n# Using default values for the model:\nA = Fvcb()\n\n# Computing Jmax:\nPlantBiophysics.arrhenius(A.JMaxRef,A.Eₐⱼ,28.0-constants.K₀,A.Tᵣ-constants.K₀,A.Hdⱼ,A.Δₛⱼ)\n# ! Warning: temperatures must be given in Kelvin\n\n# Computing Vcmax:\nPlantBiophysics.arrhenius(A.VcMaxRef,A.Eₐᵥ,28.0-constants.K₀,A.Tᵣ-constants.K₀,A.Hdᵥ,A.Δₛᵥ)\n\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.assimilation!-Union{Tuple{S}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,var\"#s104\",var\"#s103\",S} where var\"#s103\"<:AbstractGsModel where var\"#s104\"<:FvcbIter,Any}, Tuple{LeafModels{I,E,var\"#s51\",var\"#s50\",S} where var\"#s50\"<:AbstractGsModel where var\"#s51\"<:FvcbIter,Any,Any}} where S where E where I","page":"Functions","title":"PlantBiophysics.assimilation!","text":"assimilation!(leaf::LeafModels{I,E,<:FvcbIter,<:AbstractGsModel,S}, meteo, constants = Constants())\n\nPhotosynthesis using the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis  (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981). Computation is made following Farquhar & Wong (1984), Leuning et al. (1995), and the Archimed model.\n\nIterative implementation, i.e. the assimilation is computed iteratively over Cᵢ. For the analytical resolution, see Fvcb.\n\nReturns\n\nModify the first argument in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\nleaf::LeafModels{.,.,<:FvcbIter,<:AbstractGsModel,.}: A LeafModels struct holding the parameters for\n\nthe model with initialisations for:     - Tₗ (°C): leaf temperature     - PPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density     - Gbc (mol m-2 s-1): boundary conductance for CO₂     - Dₗ (mol m-2 s-1): vapour pressure difference between the surface and the air saturation     vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nTₗ, PPFD, Gbc (and Dₗ if you use Medlyn) must be initialised by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = LeafModels(photosynthesis = FvcbIter(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Tₗ = 25.0, PPFD = 1000.0, Gbc = 0.67, Dₗ = meteo.VPD)\n# NB: we need  to initalise Tₗ, PPFD and Gbc.\n\nassimilation!(leaf,meteo,Constants())\nleaf.status.A\nleaf.status.Cᵢ\n\nReferences\n\nBaldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.assimilation!-Union{Tuple{S}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,var\"#s47\",var\"#s46\",S} where var\"#s46\"<:AbstractGsModel where var\"#s47\"<:ConstantA,Any}, Tuple{LeafModels{I,E,var\"#s45\",var\"#s44\",S} where var\"#s44\"<:AbstractGsModel where var\"#s45\"<:ConstantA,Any,Any}} where S where E where I","page":"Functions","title":"PlantBiophysics.assimilation!","text":"assimilation!(leaf::LeafModels{I,E,<:ConstantA,<:AbstractGsModel,S},constants = Constants())\n\nConstant photosynthesis.\n\nReturns\n\nModify the leaf status in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation, set to leaf.photosynthesis.A (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\nleaf::LeafModels{.,.,<:ConstantA,<:AbstractGsModel,.}: A LeafModels struct holding the parameters for\n\nthe model with initialisations for:     - Cₛ (mol m-2 s-1): surface CO₂ concentration.     - Dₗ (mol m-2 s-1): vapour pressure difference between the surface and the air saturation     vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nCₛ (and Dₗ if you use Medlyn) must be initialised by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\nleaf = LeafModels(photosynthesis = ConstantA(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Cₛ = 400.0)\n\nassimilation!(leaf,meteo,Constants())\n\nleaf.status.A\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.assimilation!-Union{Tuple{S}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,var\"#s49\",var\"#s48\",S} where var\"#s48\"<:AbstractGsModel where var\"#s49\"<:Fvcb,Any}, Tuple{LeafModels{I,E,var\"#s47\",var\"#s46\",S} where var\"#s46\"<:AbstractGsModel where var\"#s47\"<:Fvcb,Any,Any}} where S where E where I","page":"Functions","title":"PlantBiophysics.assimilation!","text":"assimilation!(leaf::LeafModels{I,E,<:Fvcb,<:AbstractGsModel,S},constants = Constants())\n\nPhotosynthesis using the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis  (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981). Computation is made following Farquhar & Wong (1984), Leuning et al. (1995), and the MAESPA model (Duursma et al., 2012). The resolution is analytical as first presented in Baldocchi (1994), and needs Cₛ as input.\n\nIf you prefer to use Gbc, you can use the iterative implementation of the Fvcb model FvcbIter\n\nReturns\n\nModify the first argument in place for A, Gₛ and Cᵢ:\n\nA: carbon assimilation (μmol[CO₂] m-2 s-1)\nGₛ: stomatal conductance for CO₂ (mol[CO₂] m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\nleaf::LeafModels{.,.,<:Fvcb,<:AbstractGsModel,.}: A LeafModels struct holding the parameters for\n\nthe model with initialisations for:     - Tₗ (°C): leaf temperature     - PPFD (μmol m-2 s-1): absorbed Photosynthetic Photon Flux Density     - Cₛ (mol m-2 s-1): surface CO₂ concentration.     - Dₗ (mol m-2 s-1): vapour pressure difference between the surface and the air saturation     vapour pressure in case you're using the stomatal conductance model of Medlyn.\n\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nTₗ, PPFD, Cₛ (and Dₗ if you use Medlyn) must be initialised by providing them as keyword arguments (see examples). If in doubt, it is simpler to compute the energy balance of the leaf with the photosynthesis to get those variables. See energy_balance for more details.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = LeafModels(photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n# NB: we need  to initalise Tₗ, PPFD and Cₛ\n\nassimilation!(leaf,meteo,Constants())\nleaf.status.A\nleaf.status.Cᵢ\n\nReferences\n\nBaldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.D. Schulze. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.atmosphere_emissivity-Tuple{Any,Any,Any}","page":"Functions","title":"PlantBiophysics.atmosphere_emissivity","text":"atmosphere_emissivity(Tₐ,eₐ)\n\nEmissivity of the atmoshpere at a given temperature and vapor pressure.\n\nArguments\n\nTₐ (°C): air temperature\neₐ (kPa): air vapor pressure\nK₀ (°C): absolute zero\n\nExamples\n\nTₐ = 20.0\nVPD = 1.5\natmosphere_emissivity(Tₐ, vapor_pressure(Tₐ,VPD))\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.black_body-Tuple{Any,Any,Any}","page":"Functions","title":"PlantBiophysics.black_body","text":"black_body(T, K₀, σ)\nblack_body(T)\n\nThermal infrared, i.e. longwave radiation emitted from a black body at temperature T.\n\nT: temperature of the object in Celsius degree\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nK₀ and σ are taken from Constants if not provided.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.e_sat-Tuple{Any}","page":"Functions","title":"PlantBiophysics.e_sat","text":"e_sat(T)\n\nSaturated water vapour pressure (es, in kPa) at given temperature T (°C). See Jones (1992) p. 110 for the equation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.e_sat_slope-Tuple{Any}","page":"Functions","title":"PlantBiophysics.e_sat_slope","text":"e_sat_slope(T)\n\nSlope of the vapor pressure saturation curve at a given temperature T (°C).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.energy_balance","page":"Functions","title":"PlantBiophysics.energy_balance","text":"energy_balance(object::AbstractComponentModel,meteo::Atmosphere,constants = Constants())\nenergy_balance!(object::AbstractComponentModel,meteo::Atmosphere,constants = Constants())\n\nComputes the energy balance of a component based on the type of the model it was parameterized with in object.energy.\n\nAt the moment, two models are implemented in the package:\n\nMonteith: the model found in Monteith and Unsworth (2013)\nMissing: if no computation of the energy balance is needed\n\nArguments\n\nobject::AbstractComponentModel: a Component struct.\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nNote\n\nSome models need initialisations for some variables. For example Monteith requires to initialise a value for Rn, d and skyFraction. If you read the models from a file, you can use init_status! (see examples).\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using the model of Monteith and Unsworth (2013) for energy, Farquhar et al. (1980) for\n# photosynthesis, and Medlyn et al. (2011) for stomatal conductance:\nleaf = LeafModels(energy = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Rn = 13.747, skyFraction = 1.0, PPFD = 1500.0, d = 0.03)\n\nenergy_balance(leaf,meteo)\n\n# Using a model file:\nmodel = read_model(\"a-model-file.yml\")\n\n# An example model file is available here:\n# \"https://raw.githubusercontent.com/VEZY/PlantBiophysics/main/test/inputs/models/plant_coffee.yml\"\n\n# Initialising the mandatory variables:\ninit_status!(model, Rn = 13.747, skyFraction = 1.0, PPFD = 1500.0, Tₗ = 25.0, d = 0.03)\n\n# Running a simulation for all component types in the same scene:\nenergy_balance!(model, meteo)\n\nmodel[\"Leaf\"].status.Rn\nmodel[\"Leaf\"].status.A\nmodel[\"Leaf\"].status.Cᵢ\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\nVezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.f_ms_to_mol-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.f_ms_to_mol","text":"Conversion factor between conductance in m s^-1 to mol m^-2 s^-1.\n\nArguments\n\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gbh_to_gbw","page":"Functions","title":"PlantBiophysics.gbh_to_gbw","text":"gbh_to_gbw(gbh, Gbₕ_to_Gbₕ₂ₒ = Constants().Gbₕ_to_Gbₕ₂ₒ)\ngbw_to_gbh(gbh, Gbₕ_to_Gbₕ₂ₒ = Constants().Gbₕ_to_Gbₕ₂ₒ)\n\nBoundary layer conductance for water vapor from boundary layer conductance for heat.\n\nArguments\n\ngbh (m s-1): boundary layer conductance for heat under mixed convection.\nGbₕ_to_Gbₕ₂ₒ: conversion factor.\n\nNote\n\nGbₕ is the sum of free and forced convection. See gbₕ_free and gbₕ_forced.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.gbₕ_forced-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.gbₕ_forced","text":"gbₕ_forced(Wind,d)\n\nBoundary layer conductance for heat under forced convection (m s-1). See eq. E1 from Leuning et al. (1995) for more details.\n\nArguments\n\nWind (m s-1): wind speed\nd (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\n\nNotes\n\nd is the minimal dimension of the surface of an object in contact with the air.\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gbₕ_free","page":"Functions","title":"PlantBiophysics.gbₕ_free","text":"gbₕ_free(Tₐ,Tₗ,d,Dₕ₀)\ngbₕ_free(Tₐ,Tₗ,d)\n\nLeaf boundary layer conductance for heat under free convection (m s-1).\n\nArguments\n\nTₐ (°C): air temperature\nTₗ (°C): leaf temperature\nd (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\nDₕ₀ = 21.5e-6: molecular diffusivity for heat at base temperature. Use value from\n\nConstants if not provided.\n\nNote\n\nR and Dₕ₀ can be found using Constants. To transform in mol m^-2 s^-1, use ms_to_mol.\n\nReferences\n\nLeuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « Leaf nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. Paragraph 10.1.3, eq. 10.9.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_Cᵢᵥ-NTuple{7,Any}","page":"Functions","title":"PlantBiophysics.get_Cᵢᵥ","text":"Analytic resolution of Cᵢ when the Rubisco activity is limiting (μmol mol^-1)\n\nArguments\n\nVcMAX: maximum rate of Rubisco activity(μmol m^-2 s^-1)\nΓˢ: CO2 compensation point Γ^ (μmol mol^-1)\nCₛ: stomatal CO₂ concentration (μmol mol^-1)\nRd: day respiration (μmol m^-2 s^-1)\ng0: residual stomatal conductance (μmol m^-2 s^-1)\ngs_mod: stomatal conductance term computed from a given implementation of a Gs model,\n\ne.g. Medlyn.\n\nKm: effective Michaelis–Menten coefficient for CO2 (μ mol mol^-1)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_Cᵢⱼ-NTuple{6,Any}","page":"Functions","title":"PlantBiophysics.get_Cᵢⱼ","text":"Analytic resolution of Cᵢ when the rate of electron transport is limiting (μmol mol^-1)\n\nArguments\n\nVⱼ: RuBP regeneration (J/4.0, μmol m^-2 s^-1)\nΓˢ: CO2 compensation point Γ^ (μmol mol^-1)\nCₛ: stomatal CO₂ concentration (μmol mol^-1)\nRd: day respiration (μmol m^-2 s^-1)\ng0: residual stomatal conductance (μmol m^-2 s^-1)\ngs_mod: stomatal conductance term computed from a given implementation of a Gs model,\n\ne.g. Medlyn.\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nWang and Leuning, 1998\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_Dₕ","page":"Functions","title":"PlantBiophysics.get_Dₕ","text":"get_Dₕ(T,Dₕ₀)\nget_Dₕ(T)\n\nDₕ -molecular diffusivity for heat at base temperature- from Dₕ₀ (corrected by temperature). See Monteith and Unsworth (2013, eq. 3.10).\n\nArguments\n\nTₐ (°C): temperature\nDₕ₀: molecular diffusivity for heat at base temperature. Use value from Constants\n\nif not provided.\n\nReferences\n\nMonteith, John, et Mike Unsworth. 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. Paragraph 10.1.3.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_J-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.get_J","text":"Rate of electron transport J (μmol m^-2 s^-1), computed using the smaller root of the quadratic equation (eq. 4 from Medlyn et al., 2002):\n\nθ * J² - (α * PPFD + JMax) * J + α * PPFD * JMax\n\nNB: we use the smaller root because considering the range of values for θ and α (quite stable), and PPFD and JMax, the function always tends to JMax with high PPFD with the smaller root (behavior we are searching), and the opposite with the larger root.\n\nReturns\n\nA tuple with (A, Gₛ, Cᵢ):\n\nA: carbon assimilation (μmol m-2 s-1)\nGₛ: stomatal conductance (mol m-2 s-1)\nCᵢ: intercellular CO₂ concentration (ppm)\n\nArguments\n\nPPFD: absorbed photon irradiance (μmol_quanta m^-2 s^-1)\nα: quantum yield of electron transport (mol_e mol^-1_quanta)\nJMax: maximum rate of electron transport (μmol m^-2 s^-1)\nθ: determines the shape of the non-rectangular hyperbola (-)\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nVon Caemmerer, Susanna. 2000. Biochemical models of leaf photosynthesis. Csiro publishing.\n\nExamples\n\n# Using default values for the model:\njulia> A = Fvcb()\nFvcb{Float64}(25.0, 200.0, 250.0, 0.6, 46390.0, 210.0, 29680.0, 200000.0, 631.88, 58550.0, 200000.0, 629.26, 0.425, 0.9)\n\njulia> PlantBiophysics.get_J(1500, A.JMaxRef, A.α, A.θ)\n236.11111111111111\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_component_type-Union{Tuple{E}, Tuple{I}, Tuple{I,E}} where E<:AbstractEnergyModel where I<:AbstractInterceptionModel","page":"Functions","title":"PlantBiophysics.get_component_type","text":"get_component_type(processes)\n\nReturn the component type (the actual struct) given the processes passed as a named Tuple.\n\nIt is considered a Component if it presents models for interception and energy only.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_component_type-Union{Tuple{Gs}, Tuple{A}, Tuple{I}, Tuple{E}, Tuple{E,I,A,Gs}} where Gs<:AbstractGsModel where A<:AbstractAModel where I<:AbstractInterceptionModel where E<:AbstractEnergyModel","page":"Functions","title":"PlantBiophysics.get_component_type","text":"get_component_type(processes)\n\nReturn the component type (the actual struct) given the processes passed as a named Tuple. It is considered a LeafModels if it presents models for photosynthesis and stomatal_conductance, and optionally for interception and energy.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_km","page":"Functions","title":"PlantBiophysics.get_km","text":"Compute the effective Michaelis–Menten coefficient for CO2 Km (μ mol mol^-1) according to Medlyn et al. (2002), equations (5) and (6).\n\nReferences\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nExamples\n\n# computing the temperature dependence of γˢ:\nget_km(28,25,210.0)\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.get_model-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.get_model","text":"get_model(x)\n\nReturn the model (the actual struct) given its name passed as a String.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.get_process-Tuple{Any}","page":"Functions","title":"PlantBiophysics.get_process","text":"get_process(x)\n\nReturn the process type (the actual struct) given its name passed as a String.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.grey_body-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.grey_body","text":"Thermal infrared, i.e. longwave radiation emitted from an object at temperature T.\n\nT: temperature of the object in Celsius degree\nε object emissivity (not to confuse with ε the\n\nratio of molecular weights from Constants). A typical value for a leaf is 0.955.\n\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nK₀ and σ are taken from Constants if not provided.\n\nExamples\n\n# Thermal infrared radiation of water at 25 °C:\ngrey_body(25.0, 0.96)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gs-Union{Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,A,Gs,S},Any}} where S where Gs<:AbstractGsModel where A where E where I","page":"Functions","title":"PlantBiophysics.gs","text":"gs(leaf::LeafModels{I,E,A,<:AbstractGsModel,S},gs_mod)\ngs(leaf::LeafModels{I,E,A,<:AbstractGsModel,S},meteo<:Atmosphere)\ngs!(leaf::LeafModels{I,E,A,<:AbstractGsModel,S},gs_mod)\ngs!(leaf::LeafModels{I,E,A,<:AbstractGsModel,S},meteo<:Atmosphere)\n\nDefault method to compute the stomatal conductance for CO₂ (mol m-2 s-1), it takes the form:\n\nleaf.stomatal_conductance.g0 + gs_closure(leaf,meteo) * leaf.status.A\n\nwhere gsclosure(leaf,meteo) computes the stomatal closure, and must be implemented for the type of `leaf.stomatalconductance`.\n\nArguments\n\nleaf::LeafModels{I,E,A,<:AbstractGsModel,S}: A leaf struct holding the parameters for the model. See\n\nLeafModels, and Medlyn or ConstantGs for the conductance models.\n\ngs_mod: the output from a gs_closure implementation (the conductance models\n\ngenerally only implement this function)\n\nmeteo<:Atmosphere: meteo data, see Atmosphere\n\nExamples\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\n# Using a constant value for Gs:\n\nleaf = LeafModels(stomatal_conductance = Medlyn(0.03,12.0), # Instance of a Medlyn type\n            A = 20.0, Cₛ = 380.0, Dₗ = meteo.VPD)\n\n# Computing the stomatal conductance using the Medlyn et al. (2011) model:\ngs(leaf,meteo)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gs-Union{Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,A,Gs,S},Any}} where S where Gs<:ConstantGs where A where E where I","page":"Functions","title":"PlantBiophysics.gs","text":"Constant stomatal conductance for CO₂ (mol m-2 s-1).\n\nNote\n\nmeteo or gs_mod are just declared here for compatibility with the call from photosynthesis (need a constant way of calling the functions).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gs_closure-Union{Tuple{LeafModels{I,E,A,Gs,S}}, Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,A,Gs,S},Any}} where S where Gs<:ConstantGs where A where E where I","page":"Functions","title":"PlantBiophysics.gs_closure","text":"Constant stomatal closure\n\nNote\n\nmeteo is just declared here for compatibility with other formats of calls.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gs_closure-Union{Tuple{S}, Tuple{A}, Tuple{E}, Tuple{I}, Tuple{LeafModels{I,E,A,var\"#s108\",S} where var\"#s108\"<:Medlyn,Any}} where S where A where E where I","page":"Functions","title":"PlantBiophysics.gs_closure","text":"gs_closure(leaf::LeafModels{I,E,A,<:Medlyn,S},meteo)\n\nStomatal closure for CO₂ according to Medlyn et al. (2011). Carefull, this is just a part of the computation of the stomatal conductance.\n\nThe result of this function is then used as:\n\ngs_mod = gs_closure(leaf,meteo)\n\n# And then stomatal conductance (μmol m-2 s-1) calling [`gs`](@ref):\nGₛ = leaf.stomatal_conductance.g0 + gs_mod * leaf.status.A\n\nArguments\n\nleaf::LeafModels{.,.,<:Fvcb,<:Medlyn,.}: A LeafModels struct holding the parameters for\n\nthe model.\n\nmeteo: meteorology structure, see Atmosphere. Is not used in this model.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = LeafModels(stomatal_conductance = Medlyn(0.03, 12.0),\n            Cₛ = 380.0, Dₗ = meteo.VPD)\n\ngs_mod = gs_closure(leaf, meteo)\n\nA = 20 # example assimilation (μmol m-2 s-1)\nGs = leaf.stomatal_conductance.g0 + gs_mod * A\n\n# Or more directly using `gs()`:\n\nleaf = LeafModels(stomatal_conductance = Medlyn(0.03, 12.0),\n            A = A, Cₛ = 380.0, Dₗ = meteo.VPD)\ngs(leaf,meteo)\n\nReferences\n\nMedlyn, Belinda E., Remko A. Duursma, Derek Eamus, David S. Ellsworth, I. Colin Prentice, Craig V. M. Barton, Kristine Y. Crous, Paolo De Angelis, Michael Freeman, et Lisa Wingate.\n\n« Reconciling the optimal and empirical approaches to modelling stomatal conductance ».\n\nGlobal Change Biology 17 (6): 2134‑44. https://doi.org/10.1111/j.1365-2486.2010.02375.x.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.gsc_to_gsw","page":"Functions","title":"PlantBiophysics.gsc_to_gsw","text":"gsc_to_gsw(Gₛ, Gsc_to_Gsw = Constants().Gsc_to_Gsw)\n\nConversion of a stomatal conductance for CO₂ into stomatal conductance for H₂O.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.gsw_to_gsc","page":"Functions","title":"PlantBiophysics.gsw_to_gsc","text":"gsw_to_gsc(Gₛ, Gsc_to_Gsw = Constants().Gsc_to_Gsw)\n\nConversion of a stomatal conductance for H₂O into stomatal conductance for CO₂.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.init_status!-Tuple{Dict{String,AbstractComponentModel}}","page":"Functions","title":"PlantBiophysics.init_status!","text":"init_status!(object::Dict{String,AbstractComponentModel};vars...)\ninit_status!(component::AbstractComponentModel;vars...)\n\nIntialise model variables for components with user input.\n\nExamples\n\nmodel = read_model(\"a-model-file.yml\")\ninit_status!(model, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 1.2)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.init_variables-Tuple","page":"Functions","title":"PlantBiophysics.init_variables","text":"init_variables(vars...)\n\nIntialise model variables based on their instances.\n\nExamples\n\ninit_variables(Monteith(), Medlyn(0.03,12.0))\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.init_variables_manual-Tuple","page":"Functions","title":"PlantBiophysics.init_variables_manual","text":"init_variables_manual(models...;vars...)\n\nReturn an initialisation of the model variables with given values.\n\nExamples\n\ninit_variables_manual(Monteith(); Tₗ = 20.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.inputs-Tuple{AbstractModel}","page":"Functions","title":"PlantBiophysics.inputs","text":"inputs(::AbstractModel)\n\nGet the inputs of a model.\n\nHere returns an empty tuple by default for AbstractModels (no inputs).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.inputs-Tuple{Missing}","page":"Functions","title":"PlantBiophysics.inputs","text":"inputs(::Missing)\n\nReturns an empty tuple because missing models do not need any input variables.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.instantiate-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.instantiate","text":"instantiate(x)\n\nInstantiate a model given its parameter names, considering that parameter names can be different compared to the model fields (used to insure compatibility with Archimed).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.is_initialised-Tuple{T} where T<:AbstractComponentModel","page":"Functions","title":"PlantBiophysics.is_initialised","text":"is_initialised(m::T) where T <: AbstractComponentModel\nis_initialised(m::T, models...) where T <: AbstractComponentModel\n\nCheck if the variables that must be initialised are, and return true if so, and false and an information message if not.\n\nNote\n\nThere is no way to know before-hand which process will be simulated by the user, so if you have a component with a model for each process, the variables to initialise are always the smallest subset of all, meaning it is considered the user will simulate the variables needed for other models.\n\nExamples\n\nleaf = LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0))\nis_initialised(leaf)\n\n# Searching for just a sub-set of models:\nis_initialised(leaf,leaf.photosynthesis)\n# NB: this is usefull when the leaf is parameterised for all processes but only one is\n# simulated, so its inputs must be initialised\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.is_model-Tuple{Any}","page":"Functions","title":"PlantBiophysics.is_model","text":"is_model(model)\n\nCheck if a model object has the\"Group\" and \"Type\" keys as the first level of a Dict type object. But the function is generic as long as the input struct has a keys() method.\n\nExamples\n\nmodels = read_model(\"path_to_a_model_file.yaml\")\nis_model(models)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.latent_heat-NTuple{8,Any}","page":"Functions","title":"PlantBiophysics.latent_heat","text":"latent_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ, Cₚ)\nlatent_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ)\n\nλE -the latent heat flux (W m-2)- using the Monteith and Unsworth (2013) definition corrected by Schymanski et al. (2017), eq.22.\n\nRn (W m-2): net radiation. Carefull: not the isothermal net radiation\nVPD (kPa): air vapor pressure deficit\nγˢ (kPa K−1): apparent value of psychrometer constant (see γ_star)\nRbₕ (s m-1): resistance for heat transfer by convection, i.e. resistance to sensible heat\nΔ (KPa K-1): rate of change of saturation vapor pressure with temperature (see e_sat_slope)\nρ (kg m-3): air density of moist air.\naₛₕ (1,2): number of sides that exchange energy for heat (2 for leaves)\nCₚ (J K-1 kg-1): specific heat of air for constant pressure\n\nReferences\n\nMonteith, J. and Unsworth, M., 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. See eq. 13.33.\n\nSchymanski et al. (2017), Leaf-scale experiments reveal an important omission in the Penman–Monteith equation, Hydrology and Earth System Sciences. DOI: https://doi.org/10.5194/hess-21-685-2017. See equ. 22.\n\nExamples\n\nTₐ = 20.0 ; P = 100.0 ;\nρ = air_density(Tₐ, P) # in kg m-3\nΔ = e_sat_slope(Tₐ)\n\nlatent_heat(300.0, 2.0, 0.1461683, 50.0, Δ, ρ, 2.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.latent_heat_vaporization-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.latent_heat_vaporization","text":"latent_heat_vaporization(Tₐ,λ₀)\nlatent_heat_vaporization(Tₐ)\n\nλ, the latent heat of vaporization for water (J kg-1).\n\nArguments\n\nTₐ (°C): air temperature\nλ₀: latent heat of vaporization for water at 0 degree Celsius. Taken from Constants().λ₀\n\nif not provided (see Constants).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.max_root-Tuple{Any,Any,Any}","page":"Functions","title":"PlantBiophysics.max_root","text":"Maximum value between two roots of a quadratic equation.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.mol_to_ms-NTuple{5,Any}","page":"Functions","title":"PlantBiophysics.mol_to_ms","text":"ms_to_mol(G,T,P,R,K₀)\nms_to_mol(G,T,P)\n\nConversion of a conductance G from mol m^-2 s^-1 to m s^-1.\n\nArguments\n\nG (m s^-1): conductance\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\nSee also\n\nms_to_mol for the inverse process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.ms_to_mol-NTuple{5,Any}","page":"Functions","title":"PlantBiophysics.ms_to_mol","text":"ms_to_mol(G,T,P,R,K₀)\nms_to_mol(G,T,P)\n\nConversion of a conductance G from m s^-1 to mol m^-2 s^-1.\n\nArguments\n\nG (m s^-1): conductance\nT (°C): air temperature\nP (kPa): air pressure\nR (J mol^-1 K^-1): universal gas constant.\nK₀ (°C): absolute zero\n\nSee also\n\nmol_to_ms for the inverse process.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.net_longwave_radiation-NTuple{7,Any}","page":"Functions","title":"PlantBiophysics.net_longwave_radiation","text":"net_longwave_radiation(T₁,T₂,ε₁,ε₂,F₁,K₀,σ)\nnet_longwave_radiation(T₁,T₂,ε₁,ε₂,F₁)\n\nNet longwave radiation fluxes (i.e. thermal radiation, W m-2) between an object and another. The object of interest is at temperature T₁ and has an emissivity ε₁, and the object with wich it exchanges energy is at temperature T₂ and has an emissivity ε₂.\n\nIf the result is positive, then the object of interest gain energy.\n\nArguments\n\nT₁ (Celsius degree): temperature of the target object (object 1)\nT₂ (Celsius degree): temperature of the object with which there is potential exchange (object 2)\nε₁: object 1 emissivity\nε₂: object 2 emissivity\nF₁: view factor (0-1), i.e. visible fraction of object 2 from object 1 (see note)\nK₀: absolute zero (°C)\nσ (W m^-2 K^-4) Stefan-Boltzmann constant\n\nNote\n\nF₁, the view factor (also called shape factor) is a coefficient applied to the semi-hemisphere field of view of object 1 that \"sees\" object 2. E.g. a leaf can be viewed as a plane. If one side of the leaf sees only object 2 in its field of view (e.g. the sky), then F₁ = 1. Then the net longwave radiation flux for this part of the leaf is multiplied by its actual surface to get the exchange. Note that we apply reciprocity between the two objects for the view factor (they have the same value), i.e.: A₁F₁₂ = A₂F₂₁.\n\nThen, if we take a leaf as object 1, and the sky as object 2, the visible fraction of sky viewed by the leaf would be:\n\n0.5 if the leaf is on top of the canopy, i.e. the upper side of the leaf sees the sky,\n\nthe side bellow sees other leaves and the soil.\n\nbetween 0 and 0.5 if it is within the canopy and partly shaded by other objects.\n\nNote that A₁ for a leaf is twice its common used leaf area, because A₁ is the total leaf area of the object that exchange energy.\n\n# Net thermal radiation fluxes between a leaf and the sky considering the leaf at the top of\n# the canopy:\nTₗ = 25.0 ; Tₐ = 20.0\nε₁ = 0.955 ; ε₂ = 1.0\nRₗₗ = net_longwave_radiation(Tₗ,Tₐ,ε₁,ε₂,1.0)\nRₗₗ\n\n# Rₗₗ is the net longwave radiation flux between the leaf and the atmosphere per surface area.\n# To get the actual net longwave radiation flux we need to multiply by the surface of the\n# leaf, e.g. for a leaf of 2cm²:\nleaf_area = 2e-4 # in m²\nRₗₗ * leaf_area\n\n# The leaf lose ~0.0055 W towards the atmosphere.\n\nReferences\n\nCengel, Y, et Transfer Mass Heat. 2003. A practical approach. New York, NY, USA: McGraw-Hill.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.net_radiation!-Union{Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{I}, Tuple{LeafModels{I,var\"#s106\",A,Gs,S} where var\"#s106\"<:Monteith,Atmosphere}, Tuple{LeafModels{I,var\"#s104\",A,Gs,S} where var\"#s104\"<:Monteith,Atmosphere,Any}} where S where Gs where A where I","page":"Functions","title":"PlantBiophysics.net_radiation!","text":"net_radiation!(leaf::LeafModels{I,<:Monteith,A,Gs,S},meteo::Atmosphere,constants = Constants())\nnet_radiation(leaf::LeafModels{I,<:Monteith,A,Gs,S},meteo::Atmosphere,constants = Constants())\n\nLeaf energy balance according to Monteith and Unsworth (2013), and corrigendum from Schymanski et al. (2017). The computation is close to the one from the MAESPA model (Duursma et al., 2012, Vezy et al., 2018) here. The leaf temperature is computed iteratively to close the energy balance using the mass flux (~ Rn - λE).\n\nArguments\n\nleaf::LeafModels{.,<:Monteith,.,.,.}: A LeafModels struct holding the parameters for\n\nthe model with initialisations for:     - Rn (W m-2): net global radiation (PAR + NIR + TIR). Often computed from a light interception model     - skyFraction (0-2): view factor between the object and the sky for both faces (see details).     - d (m): characteristic dimension, e.g. leaf width (see eq. 10.9 from Monteith and Unsworth, 2013).\n\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\nDetails\n\nThe skyFraction in the variables is equal to 2 if all the leaf is viewing is sky (e.g. in a controlled chamber), 1 if the leaf is e.g. up on the canopy where the upper side of the leaf sees the sky, and the side bellow sees soil + other leaves that are all considered at the same temperature than the leaf, or less than 1 if it is partly shaded.\n\nExamples\n\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\n# Using a constant value for Gs:\nleaf = LeafModels(energy = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = ConstantGs(0.0, 0.0011),\n            Rn = 13.747, skyFraction = 1.0, d = 0.03)\nnet_radiation!(leaf,meteo)\nleaf.status.Rn\njulia> 12.902547446281233\n\n# Using the model from Medlyn et al. (2011) for Gs:\nleaf = LeafModels(energy = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Rn = 13.747, skyFraction = 1.0, PPFD = 1500.0, d = 0.03)\n\nnet_radiation!(leaf,meteo)\nleaf.status.Rn\nleaf.status.Rₗₗ\nleaf.status.A\nleaf.status.Gₛ\nleaf.status.Cₛ\nleaf.status.Cᵢ\nleaf.status.Gbc\n\nReferences\n\nDuursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. « Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\nVezy, Rémi, Mathias Christina, Olivier Roupsard, Yann Nouvellon, Remko Duursma, Belinda Medlyn, Maxime Soma, et al. 2018. « Measuring and modelling energy partitioning in canopies of varying complexity using MAESPA model ». Agricultural and Forest Meteorology 253‑254 (printemps): 203‑17. https://doi.org/10.1016/j.agrformet.2018.02.005.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.net_radiation!-Union{Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{I}, Tuple{LeafModels{I,var\"#s107\",A,Gs,S} where var\"#s107\"<:Missing,Atmosphere}, Tuple{LeafModels{I,var\"#s106\",A,Gs,S} where var\"#s106\"<:Missing,Atmosphere,Any}} where S where Gs where A where I","page":"Functions","title":"PlantBiophysics.net_radiation!","text":"net_radiation!(leaf::LeafModels{I,<:Missing,A,Gs,S},meteo::Atmosphere,constants = Constants())\n\nMethod for when energy balance is missing (do nothing).\n\nArguments\n\nleaf::LeafModels{I,<:Missing,A,Gs,S}: a LeafModels struct with a missing energy model.\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.net_radiation!-Union{Tuple{S}, Tuple{Gs}, Tuple{A}, Tuple{I}, Tuple{PlantBiophysics.Component{I,var\"#s107\",S} where var\"#s107\"<:Missing,Atmosphere}, Tuple{PlantBiophysics.Component{I,var\"#s106\",S} where var\"#s106\"<:Missing,Atmosphere,Any}} where S where Gs where A where I","page":"Functions","title":"PlantBiophysics.net_radiation!","text":"net_radiation!(object::Component{I,<:Missing,S},meteo::Atmosphere,constants = Constants())\n\nMethod for when energy balance is missing (do nothing).\n\nArguments\n\nobject::Component{I,<:Missing,S}: a Component struct with a missing energy model.\nmeteo: meteorology structure, see Atmosphere\nconstants = Constants(): physical constants. See Constants for more details\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.outputs-Tuple{AbstractModel}","page":"Functions","title":"PlantBiophysics.outputs","text":"outputs(::AbstractModel)\n\nGet the outputs of a model.\n\nReturns an empty tuple by default for AbstractModels (no outputs).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.outputs-Tuple{Missing}","page":"Functions","title":"PlantBiophysics.outputs","text":"inputs(::Missing)\n\nReturns an empty tuple because missing models do not compute any variables.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.photosynthesis","page":"Functions","title":"PlantBiophysics.photosynthesis","text":"photosynthesis(leaf::AbstractComponentModel,meteo,constants = Constants())\nphotosynthesis!(leaf::AbstractComponentModel,meteo,constants = Constants())\nphotosynthesis!(object::Dict{String,PlantBiophysics.AbstractComponentModel},\n    meteo::Atmosphere,constants = Constants())\n\nGeneric photosynthesis model for photosynthetic organs. Computes the assimilation and stomatal conductance according to the models set for leaf, or for each component in object.\n\nThe models used are defined by the types of the photosynthesis and stomatal_conductance fields of leaf. For exemple to use the implementation of the Farquhar–von Caemmerer–Berry (FvCB) model (see photosynthesis), the leaf.photosynthesis field should be of type Fvcb.\n\nExamples\n\nmeteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\n# Using Fvcb model:\nleaf = LeafModels(photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n\nphotosynthesis(leaf, meteo)\n\n# Using a model file:\nmodel = read_model(\"a-model-file.yml\")\n\n# Initialising the mandatory variables:\ninit_status!(model, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = meteo.VPD)\n\n# Running a simulation for all component types in the same scene:\nphotosynthesis!(model, meteo)\nmodel[\"Leaf\"].status.A\n\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.psychrometer_constant-NTuple{4,Any}","page":"Functions","title":"PlantBiophysics.psychrometer_constant","text":"psychrometer_constant(P, λ, Cₚ, ε)\npsychrometer_constant(P, λ)\n\nγ, the psychrometer constant, also called psychrometric constant (kPa K−1). See Monteith and Unsworth (2013), p. 222.\n\nArguments\n\nP (kPa): air pressure\nλ (J kg^-1): latent heat of vaporization for water (see latent_heat_vaporization)\nCₚ (J kg-1 K-1): specific heat of air at constant pressure (J K^-1 kg^-1)\nε (Celsius degree): temperature in Celsius degree at 0 Kelvin\n\nNote\n\nCₚ, ε and λ₀ are taken from Constants if not provided.\n\nTₐ = 20.0\n\nλ = latent_heat_vaporization(Tₐ, λ₀)\npsychrometer_constant(100.0, λ)\n\nReferences\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.read_model-Tuple{Any}","page":"Functions","title":"PlantBiophysics.read_model","text":"read_model(file)\n\nRead a model file. The model file holds the choice and the parameterization of the models.\n\nArguments\n\nfile::String: path to a model file\n\nExamples\n\nmodels = read_model(\"path_to_a_model_file.yaml\")\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.rh_from_e-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.rh_from_e","text":"rh_from_e(VPD,eₛ)\n\nConversion between e (kPa) and rh (0-1).\n\nExamples\n\nrh_from_e(1.5,25.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.rh_from_vpd-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.rh_from_vpd","text":"rh_from_vpd(VPD,eₛ)\n\nConversion between VPD and rh.\n\nExamples\n\neₛ = e_sat(Tₐ)\nrh_from_vpd(1.5,eₛ)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.sensible_heat-NTuple{8,Any}","page":"Functions","title":"PlantBiophysics.sensible_heat","text":"sensible_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ, Cₚ)\nsensible_heat(Rn, VPD, γˢ, Rbₕ, Δ, ρ, aₛₕ)\n\nH -the sensible heat flux (W m-2)- using the Monteith and Unsworth (2013) definition corrected by Schymanski et al. (2017), eq.22.\n\nRn (W m-2): net radiation. Carefull: not the isothermal net radiation\nVPD (kPa): air vapor pressure deficit\nγˢ (kPa K−1): apparent value of psychrometer constant (see γ_star)\nRbₕ (s m-1): resistance for heat transfer by convection, i.e. resistance to sensible heat\nΔ (KPa K-1): rate of change of saturation vapor pressure with temperature (see e_sat_slope)\nρ (kg m-3): air density of moist air.\naₛₕ (1,2): number of sides that exchange energy for heat (2 for leaves)\nCₚ (J K-1 kg-1): specific heat of air for constant pressure\n\nReferences\n\nMonteith, J. and Unsworth, M., 2013. Principles of environmental physics: plants, animals, and the atmosphere. Academic Press. See eq. 13.33.\n\nSchymanski et al. (2017), Leaf-scale experiments reveal an important omission in the Penman–Monteith equation, Hydrology and Earth System Sciences. DOI: https://doi.org/10.5194/hess-21-685-2017. See equ. 22.\n\nExamples\n\nTₐ = 20.0 ; P = 100.0 ;\nρ = air_density(Tₐ, P) # in kg m-3\nΔ = e_sat_slope(Tₐ)\n\nsensible_heat(300.0, 2.0, 0.1461683, 50.0, Δ, ρ, 2.0)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.to_initialise-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Missing, AbstractModel}","page":"Functions","title":"PlantBiophysics.to_initialise","text":"to_initialise(v::T, vars...) where T <: Union{Missing,AbstractModel}\nto_initialise(m::T)  where T <: AbstractComponentModel\n\nReturn the variables that must be initialized providing a set of models.\n\nNote\n\nThere is no way to know before-hand which process will be simulated by the user, so if you have a component with a model for each process, the variables to initialise are always the smallest subset of all, meaning it is considered the variables needed for models can be output from other models.\n\nExamples\n\nto_initialise(Fvcb(),Medlyn(0.03,12.0))\n\n# Or using a component directly:\nleaf = LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0))\nto_initialise(leaf)\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.vapor_pressure-Tuple{Any,Any}","page":"Functions","title":"PlantBiophysics.vapor_pressure","text":"vapor_pressure(Tₐ, rh)\n\nVapor pressure (kPa) at given temperature (°C) and relative hunidity (0-1).\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.variables-Union{Tuple{T}, Tuple{T,Vararg{Any,N} where N}} where T<:Union{Missing, AbstractModel}","page":"Functions","title":"PlantBiophysics.variables","text":"variables(::Type)\nvariables(::Type, vars...)\n\nReturns a tuple with the name of the variables needed by a model, or a union of those variables for several models.\n\nNote\n\nEach model can (and should) have a method for this function.\n\nExamples\n\nvariables(Monteith())\n\nvariables(Monteith(), Medlyn(0.03,12.0))\n\nSee also\n\ninputs and outputs to get only the inputs or outputs of a model.\n\n\n\n\n\n","category":"method"},{"location":"functions/#PlantBiophysics.Γ_star","page":"Functions","title":"PlantBiophysics.Γ_star","text":"Γ_star(Tₖ,Tᵣₖ,R = Constants().R)\n\nCO₂ compensation point Γ^ (μ mol mol^-1) according to equation (12) from Medlyn et al. (2002).\n\nΓ^ is the [CO₂] at which oxygenation proceeds at\n\ntwice the rate of carboxylation causing photosynthetic uptake of CO2 to be exactly compensated by photorespiratory CO₂ release (Sharkey et al., 2007).\n\nNotes\n\nCould be replaced by equation (38) from Farquhar et al. (1980), but Medlyn et al. (2002) states that Γ^ as a relatively low effect on the model outputs.\n\nArguments\n\nTₖ (Kelvin): current temperature\nTᵣₖ (Kelvin): reference temperature at which A was measured\nR (J mol^-1 K^-1): is the universal gas constant\n\nExamples\n\n# Importing the physical constants:\nconstants = Constants()\n# computing the temperature dependence of γˢ:\nΓ_star(28-constants.K₀,25-constants.K₀,constants.R)\n\nReferences\n\nFarquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.\n\nMedlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.\n\nSharkey, Thomas D., Carl J. Bernacchi, Graham D. Farquhar, et Eric L. Singsaas. 2007. « Fitting Photosynthetic Carbon Dioxide Response Curves for C3 Leaves ». Plant, Cell & Environment 30 (9): 1035‑40. https://doi.org/10.1111/j.1365-3040.2007.01710.x.\n\n\n\n\n\n","category":"function"},{"location":"functions/#PlantBiophysics.γ_star-NTuple{6,Any}","page":"Functions","title":"PlantBiophysics.γ_star","text":"γstar(γ, ash, a_s, rbv, Rsᵥ, Rbₕ)\n\nγ∗, the apparent value of psychrometer constant (kPa K−1).\n\nArguments\n\nγ (kPa K−1): psychrometer constant\naₛₕ (1,2): number of faces exchanging heat fluxes (see Schymanski et al., 2017)\naₛᵥ (1,2): number of faces exchanging water fluxes (see Schymanski et al., 2017)\nRbᵥ (s m-1): boundary layer resistance to water vapor\nRsᵥ (s m-1): stomatal resistance to water vapor\nRbₕ (s m-1): boundary layer resistance to heat\n\nNote\n\nUsing the corrigendum from Schymanski et al. (2017) in here so the definition of latent_heat remains generic.\n\nNot to be confused with Γ_star in FcVB model, which is the CO₂ compensation point.\n\nReferences\n\nMonteith, John L., et Mike H. Unsworth. 2013. « Chapter 13 - Steady-State Heat Balance: (i) Water Surfaces, Soil, and Vegetation ». In Principles of Environmental Physics (Fourth Edition), edited by John L. Monteith et Mike H. Unsworth, 217‑47. Boston: Academic Press.\n\nSchymanski, Stanislaus J., et Dani Or. 2017. Leaf-Scale Experiments Reveal an Important Omission in the Penman–Monteith Equation ». Hydrology and Earth System Sciences 21 (2): 685‑706. https://doi.org/10.5194/hess-21-685-2017.\n\n\n\n\n\n","category":"method"},{"location":"concepts/#Concepts-and-design","page":"Package design","title":"Concepts and design","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"using PlantBiophysics","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"A particularity of this package is its ability to compose with other code. Users can add their own computations for processes easily, and still benefit freely from all the other ones. This is made possible thanks to Julia's multiple dispatch. You'll find more information in this section.","category":"page"},{"location":"concepts/#Objects","page":"Package design","title":"Objects","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Fill this section","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Scene, object, component, list of models, mtg.","category":"page"},{"location":"concepts/#Processes","page":"Package design","title":"Processes","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"At the moment, this package is designed to simulate four different processes:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"photosynthesis\nstomatal conductance\nenergy balance\nlight interception (no models at the moment, but coming soon!)","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"These processes can be simulated using different models. Each process is defined by a generic function, and an abstract structure.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"For example AbstractAModel is the abstract structure used as a supertype of all photosynthesis models, and the photosynthesis function is used to simulate this process.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Then, particular implementations of models are used to simulate the processes. These implementations are made using a concrete type (or struct) to hold the parameters of the model and their values, and a method for a function.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"For example the Farquhar–von Caemmerer–Berry (FvCB) model (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) is implemented to simulate the photosynthesis using:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"the Fvcb struct to hold the values of all parameters for the model (use fieldnames(Fvcb) to get them)\nits own method for the assimilation! function, which is used when a component has the Fvcb type in its photosynthesis field.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Then, the user calls the photosynthesis function, which call the assimilation! function itself under the hood. And the right model is found by searching which method of assimilation! correspond to the Fvcb struct (using Julia's multiple dispatch).","category":"page"},{"location":"concepts/#Abstract-types","page":"Package design","title":"Abstract types","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The higher abstract type is AbstractModel. All models in this package are subtypes of this structure.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The second one is AbstractComponentModel, which is a subtype of AbstractModel. It is used to describe a set of models for a given component.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Then comes the abstract models for each process represented:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"AbstractAModel: assimilation (photosynthesis) abstract struct\nAbstractGsModel: stomatal conductance abstract struct\nAbstractInterceptionModel: light interception abstract struct\nAbstractEnergyModel: energy balance abstract struct","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"All models for a given process are a subtype of these abstract struct. If you want to implement your own model for a process, you must make it a subtype of them too.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"For example, the Fvcb model is a subtype of AbstractAModel. You can check this using:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Fvcb <: AbstractAModel","category":"page"},{"location":"concepts/#Concrete-types:-Models","page":"Package design","title":"Concrete types: Models","text":"","category":"section"},{"location":"concepts/#Model-types","page":"Package design","title":"Model types","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The models used to simulate the processes are implemented using a concrete type (or struct) to hold the parameter values of the models, and to dispatch to the right method for the process functions.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"For example, the Farquhar–von Caemmerer–Berry model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) is implemented using the Fvcb struct. The struct holds the values of all parameters for the model.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"We can use fieldnames to get all the parameter names of this model:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"fieldnames(Fvcb)","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"That's a lot of parameters! But no worries, you don't need to provide them all (see Photosynthesis for further details).","category":"page"},{"location":"concepts/#Model-implementation","page":"Package design","title":"Model implementation","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Then we have an implementation of the model (i.e. the actual algorithm) for the given process it is meant to simulate. In this case, Fvcb is made to simulate the photosynthesis, and this process uses a function called assimilation!, which implements the models for the photosynthesis (photosynthesis is just a nice wrapper for the users).","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"So the actual implementation of the Fvcb model is written like this:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"function assimilation!(leaf::LeafModels{I,E,<:Fvcb,<:AbstractGsModel,S}, meteo, constants = Constants()) where {I,E,S}\n\n    [...]\n\nend","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Where [...] represent the lines of code implementing the model.","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The interesting bit is in the function declaration at the top, this is how all the magic happens. The first argument is called leaf, and is an instance of a LeafModels. Now if we look at what are the fields of a LeafModels:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"fieldnames(LeafModels)","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"we find that it is a structure that holds all models used to simulate the processes of a leaf. So if we want to simulate the photosynthesis with the Fvcb model, our leaf would have an instance of the Fvcb structure in its photosynthesis field, like so:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"leaf = LeafModels(photosynthesis = Fvcb());\nleaf.photosynthesis","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The photosynthesis field is the third one in a LeafModels. So what our function definition says with this:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"leaf::LeafModels{I,E,<:Fvcb,<:AbstractGsModel,S}","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"is simply that the leaf argument must be a LeafModels with its third field being of type Fvcb. This seems perfectly right because what we are talking about here is a function that implements the Fvcb model. Note also that the fourth field must be a subtype of AbstractGsModel, hence a stomatal conductance model (whatever the model). This is because the Fvcb model couples the assimilation with the stomatal conductance, so we need to simulate the stomatal conductance too for the computation of the assimilation (this is made inside the function).","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Then we also have I, E, and S that are defined as where {I,E,S}. This means we expect something here, but we don't put any constraint on what it is. This is because we don't need explicitly a model for these processes (I: light interception, E: energy balance, S: status) to simulate the photosynthesis as soon as we have the values of some required input variables.","category":"page"},{"location":"concepts/#Inputs-and-outputs","page":"Package design","title":"Inputs and outputs","text":"","category":"section"},{"location":"concepts/","page":"Package design","title":"Package design","text":"The status field of the LeafModels is used to keep track of the status of the variables related to the leaf. It is used with two purposes:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"input: provide values for variables as input of the model\noutput: give the simulated values for output variables","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"It is possible to know which variables are required as model input using inputs, e.g. for Fvcb:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"inputs(Fvcb())","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"and the outputs using outputs","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"outputs(Fvcb())","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"It is also possible to get which variables we need to instantiate before calling a process function using to_initialise on one or several models, or directly on a leaf:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"leaf = LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0));\nto_initialise(leaf)","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"If some models simulate the input variables for other models, to_initialise will return the variables that e can't simulate only. For example we don't need to initialize the leaf temperature for the photosynthesis if we provide an energy balance model that will simulate it:","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"leaf = LeafModels(energy = Monteith(), photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03,12.0));\nto_initialise(leaf)","category":"page"},{"location":"concepts/","page":"Package design","title":"Package design","text":"Now the inputs have changed, because some are simulated and others are required by the Monteith() model.","category":"page"},{"location":"get_started/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"using PlantBiophysics\nleaf = LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03, 12.0))","category":"page"},{"location":"get_started/#TL;DR","page":"Getting started","title":"TL;DR","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Simulate the leaf energy balance, photosynthesis and stomatal conductance at once using the following code:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"meteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)\n\nleaf = LeafModels(energy = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Rn = 13.747, skyFraction = 1.0, PPFD = 1500.0, d = 0.03)\n\nenergy_balance(leaf,meteo)","category":"page"},{"location":"get_started/#Introduction","page":"Getting started","title":"Introduction","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The package is designed to ease the computations of biophysical processes in plants and other objects. It is part of the Archimed platform, so it shares the same ontology (same concepts and terms).","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"This package is designed to simulate four different processes:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"photosynthesis\nstomatal conductance\nenergy balance\nlight interception (no models at the moment, but coming soon!)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"These processes can be simulated using different models included in the package, or provided by the user. Each process has its associated generic function and abstract struct (see Concepts and design).","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Then, the models are chosen by using a concrete structure that serves two purposes: holding the parameter values of the model, and dispatch to the right method when calling the generic function. They are generally named after the model they implement.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"If you don't plan to implement your own model, you just have to learn about the generic functions and the different models implemented to simulate the processes. This is what we describe in this section.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"If you want to implement your own models, please read the Concepts and design section first, and then Model implementation.","category":"page"},{"location":"get_started/#Using-a-model","page":"Getting started","title":"Using a model","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"In this package, each process can be simulated using a function:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"gs for the stomatal conductance\nphotosynthesis for the photosynthesis\nenergy_balance for the energy balance","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The call to the function is the same whatever the model you chose for simulating the process. This is some magic allowed by Julia! A call to a function is as follows:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"gs(component,meteo)\nphotosynthesis(component,meteo)\nenergy_balance(component,meteo)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"We describe the two arguments below.","category":"page"},{"location":"get_started/#Component-model","page":"Getting started","title":"Component model","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The first argument to the function is what we call a component model (AbstractComponentModel). A component model is a data structure that lists in its fields the processes simulated for a component, and the associated model and parameter values.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The model is chosen by using a particular type of model for a field of the component model. The type (in the programmatic sense) of the model helps Julia know which method it should use for simulating the process. But this is complicated technical gibberish for something quite simple. Let's use an example instead!","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The most sounding example of a component model is LeafModels. It is designed to hold all processes simulated for a photosynthetic organ, or at least for a leaf.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"A LeafModels has five fields:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"fieldnames(LeafModels)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The first four are for defining models used to simulate the associated processes, and the fifth (status) helps keeping track of the state of simulated variables, because they can be modified by a simulation.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Let's instantiate a LeafModels with some models. If we want to simulate the photosynthesis with the model of Farquhar et al. (1980) and the stomatal conductance with the model of Medlyn et al. (2011), we would use Fvcb() and Medlyn respectively, as follows:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03, 12.0))","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"We can instantiate a LeafModels without choosing a model for all processes. In our example above we don't provide any model for the interception and energy processes, so they will have the default value missing in our leaf, meaning they cannot be simulated.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Some models require some variables as input values. For example if we want to simulate the leaf photosynthesis using the Fvcb model, we need the leaf temperature, the PPFD (Photosynthetic Photon Flux Density) and the CO₂ concentration at the leaf surface. The values for these variables are given as follows:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"LeafModels(photosynthesis = Fvcb(),\n    stomatal_conductance = Medlyn(0.03, 12.0),\n    Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 0.82)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"They are given as keyword arguments (Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 0.82). This is a convenience to set up initialization values for some variables required by models. We already know that PPFD, Cₛ and Tₗ are needed for the Fvcb model. And Dₗ is needed for the Medlyn model ( and Cₛ too).","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"To know which variables you need to initialize for a simulation, use the to_initialise function on one or several model instances, or directly on a component model (e.g. LeafModels). For example in our case we use the Fvcb and Medlyn models, so we would do:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"to_initialise(Fvcb(),Medlyn(0.03, 12.0))","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Or directly on a component model after instantiation:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"leaf = LeafModels(photosynthesis = Fvcb(), stomatal_conductance = Medlyn(0.03, 12.0))\nto_initialise(leaf)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"You can also use is_initialised to know if a component is sufficiently initialized:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"is_initialised(leaf)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"And then you can initialize the component model status using init_status!:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"init_status!(leaf, Tₗ = 25.0, PPFD = 1000.0, Cₛ = 400.0, Dₗ = 1.2)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"And check again if it worked:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"is_initialised(leaf)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Yes, it did!","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Both to_initialise and is_initialised search for common input variables among all models used. Then, they compare with the outputs of the models, and if one variable is needed as input but provided as output of another model, the variable is not considered for initialization because it is thought that the user will simulate these variables.","category":"page"},{"location":"get_started/#Climate-forcing","page":"Getting started","title":"Climate forcing","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"To make a simulation, we most often need the climatic/meteorological conditions measured close to the object or component. They are given as the second argument of the process functions shown before.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The package provide its own data structure to declare those conditions, and to pre-compute other required variables. This data structure is a type called Atmosphere.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The mandatory variables to provide are: T (air temperature in °C), Rh (relative humidity, 0-1), Wind (the wind speed in m s-1) and P (the air pressure in kPa).","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"We can declare such conditions using Atmosphere such as:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The Atmosphere also computes other variables based on the provided conditions, such as the vapor pressure deficit (VPD) or the air density (ρ). You can also provide those variables as inputs if necessary. For example if you need another way of computing the VPD, you can provide it as follows:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65, VPD = 0.82)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"To access the values of the variables in meteo, use the dot syntax. For example if we need the vapor pressure at saturation, we would do as follows:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"meteo.eₛ","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"See the documentation of the function if you need more information about the variables.","category":"page"},{"location":"get_started/#List-of-models","page":"Getting started","title":"List of models","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"As presented above, each process is simulated using a particular model. A model can work either independently or in conjunction with other models. For example a stomatal conductance model is often associated with a photosynthesis model. i.e., it is called from the photosynthesis model.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Several models are provided in this package, and the user can also add new models by following the instructions in the corresponding section.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The models included in the package are listed below.","category":"page"},{"location":"get_started/#Stomatal-conductance","page":"Getting started","title":"Stomatal conductance","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The stomatal conductance (Gₛ) can be simulated using the gs function. Several models are available to simulate it:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Medlyn: an implementation of the Medlyn et al. (2011) model\nConstantGs: a model to force a constant value for Gₛ","category":"page"},{"location":"get_started/#Photosynthesis","page":"Getting started","title":"Photosynthesis","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The photosynthesis can be simulated using the photosynthesis function. Several models are available to simulate it:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"Fvcb: an implementation of the Farquhar–von Caemmerer–Berry (FvCB) model for C3 photosynthesis (Farquhar et al., 1980; von Caemmerer and Farquhar, 1981) using the analytical resolution\nFvcbIter: the same model but implemented using an iterative computation over Cᵢ\nConstantA: a model to set the photosynthesis to a constant value (mainly for testing)","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"You can choose which model you use by passing a component with an assimilation model set to one of the structs above. We will show some examples in the end of this paragraph.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"For example, you can simulate a constant assimilation of a leaf using the following code:","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"meteo = Atmosphere(T = 20.0, Wind = 1.0, P = 101.3, Rh = 0.65)\n\nleaf = LeafModels(photosynthesis = ConstantA(25.0),\n                stomatal_conductance = ConstantGs(0.03,0.1),\n                Cₛ = 380.0)\n\nphotosynthesis(leaf,meteo)","category":"page"},{"location":"get_started/#Energy-balance","page":"Getting started","title":"Energy balance","text":"","category":"section"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"The simulation of the energy balance of a component is the most integrative process of the package because it is (potentially) coupled with the conductance and assimilation models if any.","category":"page"},{"location":"get_started/","page":"Getting started","title":"Getting started","text":"To simulate the energy balance of a component, we use the energy_balance function. Only one model is implemented yet, the one presented in Monteith and Unsworth (2013). The structure is called Monteith, and is only used for photosynthetic organs. Further implementations will come in the future.","category":"page"},{"location":"photosynthesis/#photosynthesis_page","page":"Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"List all models available for photosynthesis, how to use them, what are the parameters...","category":"page"},{"location":"photosynthesis/#Parameter-effects","page":"Photosynthesis","title":"Parameter effects","text":"","category":"section"},{"location":"photosynthesis/#JPPFD","page":"Photosynthesis","title":"J~PPFD","text":"","category":"section"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"First we import the packages needed:","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"using Plots;\nusing PlantBiophysics","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"Then we set up our models and their parameter values:","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"A = Fvcb(); PPFD = 0:100:2000;","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"And finally we plot J ~ PPFD with different parameter values, with the simplification that JMax is equal to JMaxRef:","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"plot(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α, A.θ), PPFD, xlabel = \"PPFD (μmol m⁻² s⁻¹)\",\n            ylab = \"J (μmol m⁻² s⁻¹)\", label = \"Default values\", legend = :bottomright);\nplot!(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α, A.θ * 0.5), PPFD, label = \"θ * 0.5\");\nplot!(x -> PlantBiophysics.get_J(x, A.JMaxRef, A.α * 0.5, A.θ), PPFD, label = \"α * 0.5\");\nsavefig(\"f-plot.svg\"); nothing # hide","category":"page"},{"location":"photosynthesis/","page":"Photosynthesis","title":"Photosynthesis","text":"(Image: )","category":"page"},{"location":"light/#Light-interception","page":"Light interception","title":"Light interception","text":"","category":"section"},{"location":"light/","page":"Light interception","title":"Light interception","text":"List all models available for light interception, how to use them, what are the parameters...","category":"page"},{"location":"gs/#Stomatal-conductance","page":"Stomatal conductance","title":"Stomatal conductance","text":"","category":"section"},{"location":"gs/","page":"Stomatal conductance","title":"Stomatal conductance","text":"List all models available for stomatal conductance, how to use them, what are the parameters...","category":"page"},{"location":"energy_balance/#Energy-balance","page":"Energy balance","title":"Energy balance","text":"","category":"section"},{"location":"energy_balance/","page":"Energy balance","title":"Energy balance","text":"include(\"schymanski.jl\")","category":"page"},{"location":"energy_balance/","page":"Energy balance","title":"Energy balance","text":"(Image: )","category":"page"},{"location":"implement_a_model/#model_implementation_page","page":"Implement a model","title":"Model implementation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PlantBiophysics","category":"page"},{"location":"#PlantBiophysics.jl","page":"Home","title":"PlantBiophysics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Code Style: Blue) (Image: ColPrac: Contributor's Guide on Collaborative Practices for Community Packages)","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PlantBiophysics.jl is a Julia package to simulate biophysical processes for plants such as photosynthesis, conductances for heat, water vapor and CO₂, latent, sensible energy fluxes, net radiation and temperature.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package, enter the julia package manager mode by pressing ] in the REPL, and execute the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"add https://github.com/VEZY/PlantBiophysics.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use the package, execute this command from the julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PlantBiophysics","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is an example usage with a simulation of the energy balance and assimilation of a leaf with some default values.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First you have to define the meteorological conditions using Atmosphere() as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Declaring the meteorology for the simulated time-step:\nmeteo = Atmosphere(T = 22.0, Wind = 0.8333, P = 101.325, Rh = 0.4490995)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then define which model to use for each process, and their parameter values:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Using the model from Medlyn et al. (2011) for Gs and the model of Monteith and Unsworth (2013) for the energy balance:\nleaf = LeafModels(energy = Monteith(),\n            photosynthesis = Fvcb(),\n            stomatal_conductance = Medlyn(0.03, 12.0),\n            Rn = 13.747, skyFraction = 1.0, PPFD = 1500.0, d = 0.03)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, run the simulation of the energy balance and assimilation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"energy_balance!(leaf,meteo)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now the variables that were simulated by the models were updated in the leaf status. To access the values, do as follow:","category":"page"},{"location":"","page":"Home","title":"Home","text":"leaf.status.Rn\nleaf.status.Rₗₗ\nleaf.status.A\nleaf.status.Gₛ\nleaf.status.Cₛ\nleaf.status.Cᵢ","category":"page"},{"location":"","page":"Home","title":"Home","text":"And that's it!","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can see more examples in the following pages.","category":"page"},{"location":"#Similar-projects","page":"Home","title":"Similar projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MAESPA\nphotosynthesis R package\nplantecophys R package\nLeafGasExchange R package","category":"page"},{"location":"#Related-references","page":"Home","title":"Related references","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Baldocchi, Dennis. 1994. « An analytical solution for coupled leaf photosynthesis and stomatal conductance models ». Tree Physiology 14 (7-8‑9): 1069‑79. https://doi.org/10.1093/treephys/14.7-8-9.1069.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Duursma, R. A., et B. E. Medlyn. 2012. « MAESPA: a model to study interactions between water limitation, environmental drivers and vegetation function at tree and stand levels, with an example application to [CO2] × drought interactions ». Geoscientific Model Development 5 (4): 919‑40. https://doi.org/10.5194/gmd-5-919-2012.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Farquhar, G. D., S. von von Caemmerer, et J. A. Berry. 1980. « A biochemical model of photosynthetic CO2 assimilation in leaves of C3 species ». Planta 149 (1): 78‑90.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Leuning, R., F. M. Kelliher, DGG de Pury, et E.-D. SCHULZE. 1995. « LeafModels nitrogen, photosynthesis, conductance and transpiration: scaling from leaves to canopies ». Plant, Cell & Environment 18 (10): 1183‑1200.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Medlyn, B. E., D. Loustau, et S. Delzon. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. I. Seasonal changes in mature maritime pine (Pinus pinaster Ait.) ». Plant, Cell & Environment 25 (9): 1155‑65.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Medlyn, B. E., E. Dreyer, D. Ellsworth, M. Forstreuter, P. C. Harley, M. U. F. Kirschbaum, X. Le Roux, et al. 2002. « Temperature response of parameters of a biochemically based model of photosynthesis. II. A review of experimental data ». Plant, Cell & Environment 25 (9): 1167‑79. https://doi.org/10.1046/j.1365-3040.2002.00891.x.","category":"page"}]
}
